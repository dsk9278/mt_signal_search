from abc import ABC, abstractmethod
from typing import List, Optional
from mt_signal_search.domain.models import SignalInfo, BoxConnection

#ここを通してデータベースに要求を出す
class SignalRepository(ABC):
    @abstractmethod
    def add_signal(self, signal: SignalInfo) -> None: ...
    @abstractmethod
    def get_signal(self, signal_id: str) -> Optional[SignalInfo]: ...
    @abstractmethod
    def search_signals(self, keyword: str) -> List[SignalInfo]: ...
    @abstractmethod
    def get_signals_by_logic_group(self, logic_group: str) -> List[SignalInfo]: ...
    @abstractmethod
    def get_all_logic_groups(self) -> List[str]: ...
    @abstractmethod
    def add_logic_equation(self, target_signal_id: str, raw_expr: str, source_label: str = "", source_page: int | None = None) -> None: ...
    @abstractmethod
    def get_logic_expr(self, target_signal_id: str) -> str | None: ...
    @abstractmethod
    def get_source_label(self, target_signal_id: str) -> str | None: ...
    @abstractmethod
    def add_box_connection(self, conn: BoxConnection) -> None: ...

class FavoritesRepository(ABC):
    @abstractmethod
    def get_favorites(self) -> list[str]: ...
    @abstractmethod
    def add_favorite(self, logic_name: str) -> bool: ...
    @abstractmethod
    def remove_favorite(self, logic_name: str) -> bool: ...
    @abstractmethod
    def is_favorite(self, logic_name: str) -> bool: ...